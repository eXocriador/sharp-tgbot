import logging
import random
import os

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters
)

logging.basicConfig(
    filename=os.path.join(os.path.dirname(__file__), 'bot.log'),
    filemode='a',
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

PREDICTIONS = [
    "–î–∞",
    "–ù–µ—Ç",
    "–í–æ–∑–º–æ–∂–Ω–æ",
    "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –¥–∞",
    "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ—Ç",
    "–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ",
    "–ë–µ–∑ —Å–æ–º–Ω–µ–Ω–∏–π",
    "–ù–µ –º–æ–≥—É —Å–µ–π—á–∞—Å —Å–∫–∞–∑–∞—Ç—å",
    "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞",
    "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –Ω–µ—Ç",
    "–¢—ã —Å–µ—Ä—å—ë–∑–Ω–æ —ç—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å?",
    "–¢—ã —á—ë, –µ–±–ª–∞–Ω?",
    "–î–∞–∂–µ —à–∞—Ä –Ω–µ –∑–Ω–∞–µ—Ç, —á—Ç–æ —Ç—ã –Ω–µ—Å—ë—à—å",
    "–õ—É—á—à–µ –∏–¥–∏ –ø–æ–µ—à—å",
    "–°–Ω–∞—á–∞–ª–∞ –¥–æ–ø–µ–π –∫–æ—Ñ–µ, –ø–æ—Ç–æ–º —Å–ø—Ä–æ—Å–∏",
    "–î–∞, –Ω–æ —ç—Ç–æ –Ω–µ —Ç–æ—á–Ω–æ",
    "–ù–µ—Ç, –Ω–æ —Ç—ã –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–¥–µ–ª–∞–µ—à—å –ø–æ-—Å–≤–æ–µ–º—É",
    "–î—Ä—É–∂–∏—â–µ, –Ω—É —Ç—É—Ç –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ –±–µ–∑ –º–µ–Ω—è",
    "–û–π, –æ—Ç—Å—Ç–∞–Ω—å, –¥–∞–π –ø–æ—Å–ø–∞—Ç—å",
    "–ù–µ —Å–µ–π—á–∞—Å, —è –∑–∞–Ω—è—Ç –º–µ–º–∞–º–∏",
    "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –¥–∞, –Ω–æ –ª—É—á—à–µ –ø—Ä–æ–≤–µ—Ä—å –¥–≤–∞–∂–¥—ã",
    "–í–∞–Ω–≥—É—é –ø—Ä–æ–≤–∞–ª",
    "–ó–≤—É—á–∏—Ç –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–∞ –±—É–¥—É—â–µ–≥–æ —Ç–µ–±—è",
    "–ù–∞–¥–µ–π—Å—è –∏ –∂–¥–∏",
    "–ö–æ–Ω–µ—á–Ω–æ... –Ω–µ—Ç",
    "–®–∞–Ω—Å–æ–≤ –±–æ–ª—å—à–µ, —á–µ–º —É —Ç–µ–±—è –Ω–∞ —Å–µ—Å—Å–∏—é",
    "–≠—Ç–æ —Ñ–∏–∞—Å–∫–æ, –±—Ä–∞—Ç–∞–Ω",
    "–î–∞, –Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π",
    "–•–∞-—Ö–∞, –Ω–µ—Ç",
    "–î–∞, –Ω–æ –ø–æ—Ç–æ–º —Ç—ã –æ–± —ç—Ç–æ–º –ø–æ–∂–∞–ª–µ–µ—à—å",
    "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏ –æ–±—ä—è–≤–∏–ª–∏ –Ω–µ–¥–µ–ª—é —Ö—É–π–Ω–∏. –¢–≤–æ—è –æ—á–µ—Ä–µ–¥—å",
    "–°–ª–∏—à–∫–æ–º —Ç—É–ø–æ–π –≤–æ–ø—Ä–æ—Å –¥–∞–∂–µ –¥–ª—è —à–∞—Ä–∞",
    "–ù—É —Ç—ã –∏ –∫–ª–æ—É–Ω, –∫–æ–Ω–µ—á–Ω–æ"
]

RANDOM_STICKERS = [
    "CAACAgIAAxkBAhbT0WhoCXTfIA47Z1WFGdgQzxxkpXcvAAJebgAC1AZoSpj0wnjrf1AgNgQ",
    "CAACAgIAAxkBAhbTzmhoCWtc_1OXgDXcDz0BI4iM4ekDAAI7ZQAC2aJpSrSCDWePPkUhNgQ",
    "CAACAgIAAxkBAhbTymhoCWW3kVtJgBuY5oXZCxTcX-_eAALIkQACNZJpSiyGErkrKfisNgQ",
    "CAACAgIAAxkBAhbTyGhoCV9EJrUENLRR4mPY35oenHSmAAJNYgACWgVpSg-NmLJJRhgzNgQ",
    "CAACAgIAAxkBAhbTxWhoCVcwCkdDSafpvWgmoR_WpTY1AAIuZQAClIlpSqjkbUVPUXPMNgQ",
    "CAACAgIAAxkBAhbTwmhoCVHEOfYzJ2_TVl4pM05KanSsAAIzdAACdedpSrbRUzI__1QWNgQ",
    "CAACAgIAAxkBAhbTwGhoCUTbI2JFW5HG2tPkmd6sjtORAAJkdAAC4OJgSrC5eX93kQABiTYE",
    "CAACAgIAAxkBAhbTu2hoCTuEewrhDcsDqhb037M5DYMXAAIjbgACaytoSgeuiyXIVFofNgQ",
    "CAACAgIAAxkBAhbTt2hoCTAgos2tSbFBbInyR0kAAVpSwwAC1nUAAt8qYEoVcMOHXNnz_jYE",
    "CAACAgIAAxkBAhbTtGhoCSheXwzzv5PUmWgKp9ve_qO2AAIpZAAC6shoSvg7lenjt34MNgQ"
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø SHARP –º–µ–º–Ω—ã–π –±–æ—Ç.\n\n"
        "üîÆ –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –≤—ã–¥–∞–º —Ç–µ–±–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å –º–µ–º–Ω—ã–º —Å—Ç–∏–∫–µ—Ä–æ–º.\n\n"
        "–î–ª—è –ø–æ–º–æ—â–∏ –≤–≤–µ–¥–∏ /help"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è*\n\n"
        "1Ô∏è‚É£ –í –≥—Ä—É–ø–ø–µ ‚Äî –æ—Ç–≤–µ—á–∞—é, –µ—Å–ª–∏ –º–µ–Ω—è —É–ø–æ–º—è–Ω—É–ª–∏ (—Ç–µ–≥–Ω—É–ª–∏).\n"
        "2Ô∏è‚É£ –í –ª–∏—á–∫–µ ‚Äî –æ—Ç–≤–µ—á–∞—é –Ω–∞ –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        "3Ô∏è‚É£ –ü–æ–ª—É—á–∏ SHARP –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ + –º–µ–º–Ω—ã–π —Å—Ç–∏–∫–µ—Ä.\n\n"
        "‚ú® *–ù–æ–≤—ã–µ —Ñ–∏—á–∏*: —Ç–æ–∫—Å–∏—á–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ —Ä–∞–Ω–¥–æ–º–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã.\n\n"
        "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –≤–æ–ø—Ä–æ—Å—ã –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –±–æ—Ç–∞."
        , parse_mode="Markdown"
    )

async def predict(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user = message.from_user
    bot_username = (await context.bot.get_me()).username.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–¥–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type in ["group", "supergroup"]:
        # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
        if not message.entities:
            return  # –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –º–æ–ª—á–∏–º

        mention_found = False
        for entity in message.entities:
            if entity.type == "mention":
                mention_text = message.text[entity.offset : entity.offset + entity.length].lower()
                if mention_text == f"@{bot_username}":
                    mention_found = True
                    break
        if not mention_found:
            return  # –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Äî –º–æ–ª—á–∏–º

        # –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å
        question = message.text.replace(f"@{bot_username}", "").strip()
        if not question:
            await message.reply_text("‚ùó –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–µ–Ω—è!")
            return
    else:
        # –õ–∏—á–Ω–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞ ‚Äî –ª—é–±–æ–π —Ç–µ–∫—Å—Ç = –≤–æ–ø—Ä–æ—Å
        question = message.text

    prediction = random.choice(PREDICTIONS)
    sticker_id = random.choice(RANDOM_STICKERS)

    logging.info(f"User: {user.username or user.first_name} | Chat: {message.chat.id} | Prediction sent")

    await message.reply_text(f"üîÆ *–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ*: {prediction}", parse_mode="Markdown")
    await message.reply_sticker(sticker_id)


def main():
    TOKEN = "–í–ê–®_–¢–û–ö–ï–ù"

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, predict))

    print("ü§ñ SHARP MEME BOT –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()


if __name__ == "__main__":
    main()
